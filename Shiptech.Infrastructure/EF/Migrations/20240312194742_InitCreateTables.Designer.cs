// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shiptech.Infrastructure.EF.Contexts;

#nullable disable

namespace Shiptech.Infrastructure.EF.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    [Migration("20240312194742_InitCreateTables")]
    partial class InitCreateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shiptech.Domain.Entities.Assortment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("IsoId")
                        .HasColumnType("text");

                    b.Property<short>("_addition")
                        .HasColumnType("smallint")
                        .HasColumnName("Addition");

                    b.Property<short>("_assemblyLength")
                        .HasColumnType("smallint")
                        .HasColumnName("AssemblyLength");

                    b.Property<short>("_assemblyQuantity")
                        .HasColumnType("smallint")
                        .HasColumnName("AssemblyQuantity");

                    b.Property<double>("_assemblyWeight")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("AssemblyWeight");

                    b.Property<short>("_d15I")
                        .HasColumnType("smallint")
                        .HasColumnName("D15I");

                    b.Property<short>("_d15II")
                        .HasColumnType("smallint")
                        .HasColumnName("D15II");

                    b.Property<short>("_d1I")
                        .HasColumnType("smallint")
                        .HasColumnName("D1I");

                    b.Property<short>("_d1II")
                        .HasColumnType("smallint")
                        .HasColumnName("D1II");

                    b.Property<short>("_drawingLength")
                        .HasColumnType("smallint")
                        .HasColumnName("DrawingLength");

                    b.Property<char>("_position")
                        .HasColumnType("char(1)")
                        .HasColumnName("Position");

                    b.Property<short>("_prefabricationLength")
                        .HasColumnType("smallint")
                        .HasColumnName("PrefabricationLength");

                    b.Property<short>("_prefabricationQuantity")
                        .HasColumnType("smallint")
                        .HasColumnName("PrefabricationQuantity");

                    b.Property<double>("_prefabricationWeight")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("PrefabricationWeight");

                    b.Property<char>("_stage")
                        .HasColumnType("char(1)")
                        .HasColumnName("Stage");

                    b.Property<short>("_technologicalAddition")
                        .HasColumnType("smallint")
                        .HasColumnName("TechnologicalAddition");

                    b.HasKey("Id");

                    b.HasIndex("IsoId");

                    b.ToTable("Assortments", (string)null);
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.ChemicalProcess", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("_chemicalProcessName")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("ChemicalProcessName");

                    b.HasKey("Id");

                    b.ToTable("ChemicalProcesses", (string)null);
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.Drawing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ShipId")
                        .HasColumnType("text");

                    b.Property<string>("_author")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Author");

                    b.Property<string>("_block")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("Block");

                    b.Property<DateTime>("_date")
                        .HasColumnType("timestamp")
                        .HasColumnName("Date");

                    b.Property<char>("_drawingRevision")
                        .HasColumnType("char(1)")
                        .HasColumnName("DrawingRevision");

                    b.Property<string>("_lot")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("Lot");

                    b.Property<string>("_section")
                        .IsRequired()
                        .HasColumnType("char(4)")
                        .HasColumnName("Section");

                    b.Property<string>("_stage")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("Stage");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("Drawings", (string)null);
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.Iso", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DrawingId")
                        .HasColumnType("text");

                    b.Property<string>("_atest")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Atest");

                    b.Property<string>("_class")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .HasColumnName("Class");

                    b.Property<char>("_drawingRevision")
                        .HasColumnType("char(1)")
                        .HasColumnName("DrawingRevision");

                    b.Property<DateTime>("_kzmDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("KzmDate");

                    b.Property<string>("_kzmNumber")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .HasColumnName("KzmNumber");

                    b.Property<string>("_system")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("System");

                    b.HasKey("Id");

                    b.HasIndex("DrawingId");

                    b.ToTable("Isos", (string)null);
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.Ship", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("_orderer")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Orderer");

                    b.HasKey("Id");

                    b.ToTable("Ships", (string)null);
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.Assortment", b =>
                {
                    b.HasOne("Shiptech.Domain.Entities.Iso", null)
                        .WithMany("_assortments")
                        .HasForeignKey("IsoId");
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.Drawing", b =>
                {
                    b.HasOne("Shiptech.Domain.Entities.Ship", null)
                        .WithMany("_drawings")
                        .HasForeignKey("ShipId");
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.Iso", b =>
                {
                    b.HasOne("Shiptech.Domain.Entities.Drawing", null)
                        .WithMany("_isos")
                        .HasForeignKey("DrawingId");
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.Drawing", b =>
                {
                    b.Navigation("_isos");
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.Iso", b =>
                {
                    b.Navigation("_assortments");
                });

            modelBuilder.Entity("Shiptech.Domain.Entities.Ship", b =>
                {
                    b.Navigation("_drawings");
                });
#pragma warning restore 612, 618
        }
    }
}
