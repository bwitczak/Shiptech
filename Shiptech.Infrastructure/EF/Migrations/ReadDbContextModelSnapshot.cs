// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shiptech.Infrastructure.EF.Contexts;

#nullable disable

namespace Shiptech.Infrastructure.EF.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    partial class ReadDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.AssortmentReadModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("Addition")
                        .HasColumnType("integer");

                    b.Property<int>("AssemblyLength")
                        .HasColumnType("integer");

                    b.Property<int>("AssemblyQuantity")
                        .HasColumnType("integer");

                    b.Property<double>("AssemblyWeight")
                        .HasColumnType("double precision");

                    b.Property<int?>("D15I")
                        .HasColumnType("integer");

                    b.Property<int?>("D15II")
                        .HasColumnType("integer");

                    b.Property<int?>("D1I")
                        .HasColumnType("integer");

                    b.Property<int?>("D1II")
                        .HasColumnType("integer");

                    b.Property<int?>("DrawingLength")
                        .HasColumnType("integer");

                    b.Property<string>("IsoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PrefabricationLength")
                        .HasColumnType("integer");

                    b.Property<int>("PrefabricationQuantity")
                        .HasColumnType("integer");

                    b.Property<double>("PrefabricationWeight")
                        .HasColumnType("double precision");

                    b.Property<string>("Stage")
                        .HasColumnType("text");

                    b.Property<int?>("TechnologicalAddition")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsoId");

                    b.ToTable("Assortments", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.ChemicalProcessReadModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ChemicalProcessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChemicalProcesses", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.DrawingReadModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DrawingRevision")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lot")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<string>("ShipId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Stage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("Drawings", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.IsoReadModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("Atest")
                        .HasColumnType("integer");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DrawingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IsoRevision")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KzmDate")
                        .HasColumnType("text");

                    b.Property<string>("KzmNumber")
                        .HasColumnType("text");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DrawingId");

                    b.ToTable("Isos", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.ShipReadModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Orderer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ships", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.AssortmentReadModel", b =>
                {
                    b.HasOne("Shiptech.Infrastructure.EF.Models.IsoReadModel", "Iso")
                        .WithMany("Assortments")
                        .HasForeignKey("IsoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Iso");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.DrawingReadModel", b =>
                {
                    b.HasOne("Shiptech.Infrastructure.EF.Models.ShipReadModel", "Ship")
                        .WithMany("Drawings")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.IsoReadModel", b =>
                {
                    b.HasOne("Shiptech.Infrastructure.EF.Models.DrawingReadModel", "Drawing")
                        .WithMany("Isos")
                        .HasForeignKey("DrawingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drawing");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.DrawingReadModel", b =>
                {
                    b.Navigation("Isos");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.IsoReadModel", b =>
                {
                    b.Navigation("Assortments");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.ShipReadModel", b =>
                {
                    b.Navigation("Drawings");
                });
#pragma warning restore 612, 618
        }
    }
}
