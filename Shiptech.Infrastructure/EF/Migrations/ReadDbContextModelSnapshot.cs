// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shiptech.Infrastructure.EF.Contexts;

#nullable disable

namespace Shiptech.Infrastructure.EF.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    partial class ReadDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.AssortmentDictionaryReadModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<double>("Amount")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("Amount");

                    b.Property<string>("Comment")
                        .HasColumnType("varchar")
                        .HasColumnName("Comment");

                    b.Property<string>("Distinguishing")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .HasColumnName("Distinguishing");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Kind")
                        .HasColumnType("varchar")
                        .HasColumnName("Kind");

                    b.Property<short?>("Length")
                        .HasColumnType("smallint")
                        .HasColumnName("Length");

                    b.Property<string>("Material")
                        .HasColumnType("varchar")
                        .HasColumnName("Material");

                    b.Property<string>("RO")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("RO");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("char(4)")
                        .HasColumnName("Unit");

                    b.Property<double>("Weight")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("Weight");

                    b.HasKey("Name");

                    b.ToTable("AssortmentDictionary", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.AssortmentReadModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<short?>("Addition")
                        .HasColumnType("smallint")
                        .HasColumnName("Addition");

                    b.Property<short>("AssemblyLength")
                        .HasColumnType("smallint")
                        .HasColumnName("AssemblyLength");

                    b.Property<short>("AssemblyQuantity")
                        .HasColumnType("smallint")
                        .HasColumnName("AssemblyQuantity");

                    b.Property<double>("AssemblyWeight")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("AssemblyWeight");

                    b.Property<string>("AssortmentDictionaryName")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Comment")
                        .HasColumnType("varchar")
                        .HasColumnName("Comment");

                    b.Property<short?>("D15I")
                        .HasColumnType("smallint")
                        .HasColumnName("D15I");

                    b.Property<short?>("D15II")
                        .HasColumnType("smallint")
                        .HasColumnName("D15II");

                    b.Property<short?>("D1I")
                        .HasColumnType("smallint")
                        .HasColumnName("D1I");

                    b.Property<short?>("D1II")
                        .HasColumnType("smallint")
                        .HasColumnName("D1II");

                    b.Property<short?>("DrawingLength")
                        .HasColumnType("smallint")
                        .HasColumnName("DrawingLength");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("IsoName")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<char>("Position")
                        .HasColumnType("char(1)")
                        .HasColumnName("Position");

                    b.Property<short>("PrefabricationLength")
                        .HasColumnType("smallint")
                        .HasColumnName("PrefabricationLength");

                    b.Property<short>("PrefabricationQuantity")
                        .HasColumnType("smallint")
                        .HasColumnName("PrefabricationQuantity");

                    b.Property<double>("PrefabricationWeight")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("PrefabricationWeight");

                    b.Property<string>("Stage")
                        .HasColumnType("char(1)")
                        .HasColumnName("Stage");

                    b.Property<short?>("TechnologicalAddition")
                        .HasColumnType("smallint")
                        .HasColumnName("TechnologicalAddition");

                    b.HasKey("Name");

                    b.HasIndex("AssortmentDictionaryName");

                    b.HasIndex("IsoName");

                    b.ToTable("Assortments", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.ChemicalProcessReadModel", b =>
                {
                    b.Property<string>("ChemicalProcessCode")
                        .HasColumnType("varchar")
                        .HasColumnName("ChemicalProcessCode");

                    b.Property<string>("ChemicalProcessName")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("ChemicalProcessName");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("ChemicalProcessCode");

                    b.ToTable("ChemicalProcesses", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.DrawingReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Author");

                    b.Property<string>("Block")
                        .HasColumnType("char(3)")
                        .HasColumnName("Block");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("CreationDate");

                    b.Property<char>("DrawingRevision")
                        .HasColumnType("char(1)")
                        .HasColumnName("DrawingRevision");

                    b.Property<string>("Lot")
                        .HasColumnType("char(3)")
                        .HasColumnName("Lot");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<string>("Section")
                        .HasColumnType("char(4)")
                        .HasColumnName("Section");

                    b.Property<string>("ShipOrderer")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Stage")
                        .HasColumnType("char(3)")
                        .HasColumnName("Stage");

                    b.HasKey("Id");

                    b.HasIndex("ShipOrderer");

                    b.ToTable("Drawings", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.IsoReadModel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<string>("Atest")
                        .HasColumnType("varchar")
                        .HasColumnName("Atest");

                    b.Property<string>("ChemicalProcessCode")
                        .IsRequired()
                        .HasColumnType("varchar");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("char(6)")
                        .HasColumnName("Class");

                    b.Property<Guid>("DrawingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<char>("IsoRevision")
                        .HasColumnType("char(1)")
                        .HasColumnName("DrawingRevision");

                    b.Property<DateTime?>("KzmDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("KzmDate");

                    b.Property<string>("KzmNumber")
                        .HasColumnType("char(6)")
                        .HasColumnName("KzmNumber");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("System");

                    b.HasKey("Name");

                    b.HasIndex("ChemicalProcessCode");

                    b.HasIndex("DrawingId");

                    b.ToTable("Isos", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.ShipReadModel", b =>
                {
                    b.Property<string>("Orderer")
                        .HasColumnType("varchar")
                        .HasColumnName("Orderer");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.HasKey("Orderer");

                    b.ToTable("Ships", (string)null);
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.AssortmentReadModel", b =>
                {
                    b.HasOne("Shiptech.Infrastructure.EF.Models.AssortmentDictionaryReadModel", "AssortmentDictionary")
                        .WithMany("Assortments")
                        .HasForeignKey("AssortmentDictionaryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiptech.Infrastructure.EF.Models.IsoReadModel", "Iso")
                        .WithMany("Assortments")
                        .HasForeignKey("IsoName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssortmentDictionary");

                    b.Navigation("Iso");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.DrawingReadModel", b =>
                {
                    b.HasOne("Shiptech.Infrastructure.EF.Models.ShipReadModel", "Ship")
                        .WithMany("Drawings")
                        .HasForeignKey("ShipOrderer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.IsoReadModel", b =>
                {
                    b.HasOne("Shiptech.Infrastructure.EF.Models.ChemicalProcessReadModel", "ChemicalProcess")
                        .WithMany("Isos")
                        .HasForeignKey("ChemicalProcessCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shiptech.Infrastructure.EF.Models.DrawingReadModel", "Drawing")
                        .WithMany("Isos")
                        .HasForeignKey("DrawingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChemicalProcess");

                    b.Navigation("Drawing");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.AssortmentDictionaryReadModel", b =>
                {
                    b.Navigation("Assortments");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.ChemicalProcessReadModel", b =>
                {
                    b.Navigation("Isos");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.DrawingReadModel", b =>
                {
                    b.Navigation("Isos");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.IsoReadModel", b =>
                {
                    b.Navigation("Assortments");
                });

            modelBuilder.Entity("Shiptech.Infrastructure.EF.Models.ShipReadModel", b =>
                {
                    b.Navigation("Drawings");
                });
#pragma warning restore 612, 618
        }
    }
}
